import:
    # Global variables
    # - global.yaml
    # Styles
    - styles/lines.yaml
    - styles/polygons.yaml
    # Layers
    - layers/water.yaml
    - layers/earth.yaml
    - layers/roads.yaml
    - layers/roads-labels.yaml
    - layers/transit.yaml
    - layers/buildings.yaml
    - layers/landuse.yaml
    - layers/boundaries.yaml
    - layers/places.yaml
    # - layers/telecom.yaml
    # - layers/pois.yaml

global:
    ux_application_mode: navigation
    ux_language: false             # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_fallback: false    # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_text_source: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
        }
    ux_language_text_source_short: |
        function() {
            return (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
        }
    ux_language_text_source_short_proxy_name: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var short = (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
            return short ? name : '';
        }
    ux_language_text_source_abbreviation: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var abbrev = (global.ux_language && feature['name:abbreviation:'+global.ux_language]) || (global.ux_language_fallback && feature['name:abbreviation:'+global.ux_language_fallback]) || feature['name:abbreviation'];
            return abbrev || name;
        }
    ux_language_text_source_iata: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.iata) {
                if (name) {
                    return name + ' (' + feature.iata + ')';
                }
                else {
                    return feature.iata;
                }
            } else {
                return name;
            }
        }
    ux_language_text_source_ocean: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split('').join('  ');
        }
    ux_language_text_source_sea: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split('').join(' ');
        }
    ux_language_text_source_continent: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split('').join(' ');
        }
    ux_language_text_source_road_ref_and_name: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.ref && name) {
                return (feature.ref + ' ' + name);
            } else {
                return name;
            }
        }
    ux_language_text_source_road_ref_and_name_short: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (feature.ref && (feature.ref.length < 6) && name) {
                return feature.ref + ' ' + name;
            } else {
                return name;
            }
        }
    ux_language_text_source_piste_advanced: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆ ' + name) : '◆';
        }
    ux_language_text_source_piste_expert: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆◆ ' + name) : '◆◆';
        }
    ux_language_text_source_building_and_address: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (name && feature.addr_housenumber) {
                return name + '\n' + feature.addr_housenumber;
            } else {
                return name;
            }
        }
    #label visibility
    text_visible_admin: true
    text_visible_populated_places: true
    icon_visible_populated_places: true
    text_visible_neighbourhoods: true
    text_visible_neighbourhoods_e: true


# Sources
sources:
    mapzen:
        type: TopoJSON
        url: https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-uP4vdQc
        rasters: [normals-elevation]
    normals-elevation:
        type: Raster
        url: https://s3.amazonaws.com/elevation-tiles-prod/normal/{z}/{x}/{y}.png
        max_zoom: 15   

# Camera
cameras:
    cam:
        type: perspective

# Fonts
fonts:
    Abel:
        url: https://fonts.gstatic.com/s/abel/v6/wnJbeWILdr-ZMJJAMsiXsvesZW2xOQ-xsNqO47m55DA.woff
    Aldrich:
        url: https://fonts.gstatic.com/s/aldrich/v6/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff
    Audiowide:
        url: https://fonts.gstatic.com/s/audiowide/v4/8XtYtNKEyyZh481XVWfVOrO3LdcAZYWl9Si6vvxL-qU.woff
    Cairo:
        url: https://fonts.gstatic.com/s/cairo/v1/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff
    Cairo-Light:
        url: https://fonts.gstatic.com/s/cairo/v1/kjh52RWXSUbTPMXEhLHVFHYhjbSpvc47ee6xR_80Hnw.woff
    Exo2:
        url: https://fonts.gstatic.com/s/exo2/v3/KzoFUeaQw_faskDsymvVJqCWcynf_cDxXwCLxiixG1c.woff
    Inconsolata:
        url: https://fonts.gstatic.com/s/inconsolata/v12/BjAYBlHtW3CJxDcjzrnZCLrIa-7acMAeDBVuclsi6Gc.woff
    Monoton:
        url: https://fonts.gstatic.com/s/monoton/v6/E1qpC-_4m0LngvlMPmKrlgLUuEpTyoUstqEm5AMlJo4.woff
    Offside:
        url: https://fonts.gstatic.com/s/offside/v4/kXtToyuSIeDzSauH8LQwXALUuEpTyoUstqEm5AMlJo4.woff
    Orbitron:
        url: https://fonts.gstatic.com/s/orbitron/v7/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff
    Play:
        url: https://fonts.gstatic.com/s/play/v7/IkErdnKw9ItVkLeeur9GHfesZW2xOQ-xsNqO47m55DA.woff
    Spacemono:
        url: https://fonts.gstatic.com/s/spacemono/v1/adVweg3BJhE6r8jYmXseHb3hpw3pgy2gAi-Ip7WPMi0.woff
    Ubuntu:
        url: https://fonts.gstatic.com/s/ubuntu/v9/vRvZYZlUaogOuHbBTT1SNevvDin1pK8aKteLpeZ5c0A.woff

global:
    animated: true
    order_add_9: function () { return (feature.sort_key * 20 + 9); }
    order_add_8: function () { return (feature.sort_key * 20 + 8); }
    order_add_7: function () { return (feature.sort_key * 20 + 7); }
    order_add_6: function () { return (feature.sort_key * 20 + 6); }
    order_add_5: function () { return (feature.sort_key * 20 + 5); }
    order_add_4: function () { return (feature.sort_key * 20 + 4); }
    order_add_3: function () { return (feature.sort_key * 20 + 3); }
    order_add_2: function () { return (feature.sort_key * 20 + 2); }
    order_add_1: function () { return (feature.sort_key * 20 + 1); }
    order: function () { return (feature.sort_key * 20); }
    order_sub_1: function () { return (feature.sort_key * 20 - 1); }
    order_sub_2: function () { return (feature.sort_key * 20 - 2); }
    order_sub_3: function () { return (feature.sort_key * 20 - 3); }
    order_sub_4: function () { return (feature.sort_key * 20 - 4); }
    order_sub_5: function () { return (feature.sort_key * 20 - 5); }
    order_sub_6: function () { return (feature.sort_key * 20 - 6); }
    order_sub_7: function () { return (feature.sort_key * 20 - 7); }
    order_sub_8: function () { return (feature.sort_key * 20 - 8); }
    order_sub_9: function () { return (feature.sort_key * 20 - 9); }
    pseudoRandomColor: |
        function() {
            return [
                0.7 * (parseInt(feature.id, 16) / 100 % 1),     // jshint ignore:line
                0.7 * (parseInt(feature.id, 16) / 10000 % 1),   // jshint ignore:line
                0.7 * (parseInt(feature.id, 16) / 1000000 % 1), // jshint ignore:line
                1
            ];
        }

# Scene
scene:
    animated: global.animated
    background:
        color: black